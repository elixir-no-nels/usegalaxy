# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python36-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# Galaxy
galaxy_create_user: false
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_log_dir: /var/log/galaxy

galaxy_user: { name: galaxy }
galaxy_commit_id: release_20.01
galaxy_config_style: yaml
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: "4.6.14"
galaxy_instance_codename: "{{ env }}"
galaxy_file_path: /data

galaxy_config:
  galaxy:
    brand: "/ NeLS"
    admin_users: "{{ galaxy_admin }}"
    master_api: "{{ galaxy_master_api_key }}"
    enable_beta_gdpr: true
    database_connection: "{{ db_connection }}"
    file_path: "{{ galaxy_file_path }}"
    tool_data_path: "{{ galaxy_server_dir }}/tool-data"
    check_migrate_tools: false
    #tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    job_metrics_config_file: "{{ galaxy_config_dir }}/job_metrics_conf.xml"
    sanitize_whitelist_file: "{{ galaxy_mutable_config_dir }}/sanitize_whitelist.txt"
    interactivetools_enable: "True"
    interactivetools_map: "{{ gie_proxy_sessions_path }}"
    outputs_to_working_directory: True
    galaxy_infrastructure_url: "https://{{ galaxy_host }}/"
    log_level: INFO
    allow_path_paste: true
    #    require_login: true
    allow_user_impersonation: true
    smtp_server: "localhost"
    email_from: "galaxy-no-reply@{{ galaxy_host }}"

    welcome_url: static/welcome.html
    support_url: https://elixir.no/helpdesk
    terms_url: https://{{galaxy_host}}/galaxy-terms/
    statsd_host: localhost
    statsd_influxdb: true
    id_secret: "{{galaxy_id_secret}}"

    message_box_visible: true
    message_box_class: warning
    message_box_content: This is the development version of the new usegalaxy.no website. Not for production use!

  uwsgi:
    # Default values
    socket: 127.0.0.1:8080
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static/style={{ galaxy_server_dir }}/static/style/blue/
      - /static={{ galaxy_server_dir }}/static
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    # Our additions
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2

galaxy_systemd_zergling_env: DRMAA_LIBRARY_PATH=/usr/lib64/libdrmaa.so.1

galaxy_singularity_images_cvmfs_path: '/cvmfs/singularity.galaxyproject.org/all/'
galaxy_handler_count: "{{ galaxy_systemd_handlers }}"
pulsar_rabbitmq_proxy: "{{ groups['database'][0] }}"

# Job Conf
galaxy_jobconf:
    plugin_workers: 8
    handlers:
        count: "{{ galaxy_handler_count }}"
        assign_with: db-skip-locked
        max_grab: 8
    plugins:
        #- id: drmaa
          #load: galaxy.jobs.runners.drmaa:DRMAAJobRunner
          #workers: 3
        # These live on the pythonpath
        - id: dynamic
          params:
            rules_module: 'usegalaxy'
        - id: slurm
          load: galaxy.jobs.runners.slurm:SlurmJobRunner
        - id: local
          load: galaxy.jobs.runners.local:LocalJobRunner
        - id: pulsar_embedded
          load: galaxy.jobs.runners.pulsar:PulsarEmbeddedJobRunner
        - id: pulsar_no_test
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "amqp://test:{{ test_rabbitmq_password }}@{{ pulsar_rabbitmq_proxy }}//test?ssl=1"
            galaxy_url: "https://{{ galaxy_host }}"
            manager: _default_
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_no_nmbu
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "amqp://nmbu_galaxy:{{ nmbu_rabbitmq_password }}@{{ pulsar_rabbitmq_proxy }}//pulsar_nmbu_orion?ssl=1"
            galaxy_url: "https://{{ galaxy_host }}"
            manager: _default_
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
    default_destination: gateway_1x
    destinations:
        - id: local
          runner: local
        - id: slurm
          runner: slurm
          params:
            tmp_dir: "True"
        # Gateways
        - id: gateway_singlerun
          runner: dynamic
          params:
              type: python
              function: gateway
        - id: gateway_1x
          runner: dynamic
          params:
              type: python
              function: gateway_1x
        - id: gateway_1_5x
          runner: dynamic
          params:
              type: python
              function: gateway_1_5x
        - id: gateway_2x
          runner: dynamic
          params:
              type: python
              function: gateway_2x
        # Pulsar MQs
        - id: remote_cluster_mq_nrec
          runner: pulsar_no_test
          params:
              jobs_directory: /srv/pulsar/staging/
        - id: remote_cluster_mq_nmbu
          runner: pulsar_no_nmbu
          env:
              LC_ALL: C
          params:
              jobs_directory: /mnt/users/usegalaxy_no/staging/
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              #persistence_directory: /data/share/persisted_data
        - id: slurm_singularity
          runner: slurm
          params:
              singularity_enabled: 'true'
              singularity_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
              singularity_default_container_id: '/cvmfs/singularity/ubuntu:18.04'
        - id: slurm_singularity2
          runner: slurm
          params:
              singularity_enabled: 'true'
              singularity_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
              singularity_default_container_id: '/data/0/cvmfs/singularity/ubuntu:18.04'
          raw: |
            <param id="container">
                <container type="singularity" shell="/bin/sh" resolve_dependencies="true">/cvmfs/singularity/ubuntu:18.04</container>
            </param>
        - id: slurm_singularity_with_conda
          runner: slurm
          params:
              singularity_enabled: 'true'
          raw: |
            <param id="container">
                <container type="singularity" shell="/bin/bash" resolve_dependencies="true">/cvmfs/singularity/python:2.7.12--1</container>
            </param>
        - id: slurm_docker
          runner: slurm
          params:
            docker_enabled: 'true'
            docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw'
            #TODO ,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: slurm_docker_interactive
          runner: slurm
          params:
            docker_enabled: 'true'
            docker_volumes: '$working_directory:rw,$job_directory:rw'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: slurm_docker_ie
          runner: slurm
          params:
            docker_enabled: 'true'
            docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw'
            #TODO ,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: slurm_docker_ie_interactive
          runner: slurm
          params:
            docker_enabled: 'true'
            docker_volumes: '$working_directory:rw,$job_directory:rw'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
    tools:
        - id: upload1
          destination: gateway_singlerun
    limits:
      - type: 'walltime'
        value: '148:00:00'
      - type: 'output_size'
        value: '300GB'
      - type: 'registered_user_concurrent_jobs'
        value: '500'
      - type: 'anonymous_user_concurrent_jobs'
        value: '4'
      - type: 'destination_user_concurrent_jobs'
        id: 'sh_fdid_slurm_docker_ie_interactive'
        value: '10'
      - type: 'destination_user_concurrent_jobs'
        id: 'sh_fdid_slurm_intensive_jobs'
        value: '10'

galaxy_config_files:
  - src: files/galaxy/config/job_metrics_conf.xml
    dest: "{{ galaxy_config['galaxy']['job_metrics_config_file'] }}"
  - src: files/galaxy/config/tool_conf_interactive.xml
    dest: "{{ galaxy_config_dir }}/tool_conf_interactive.xml"
  - src: files/galaxy/tools/sanitize_whitelist.txt
    dest: "{{ galaxy_mutable_config_dir }}/sanitize_whitelist.txt"
  - src: files/galaxy/tools/interactive/interactivetool_jupyter_notebook.xml
    dest: "{{ galaxy_server_dir }}/tools/interactive/interactivetool_jupyter_notebook.xml"

galaxy_tool_config_files:
  - "{{ galaxy_config_dir }}/tool_conf.xml"
  - "{{ galaxy_config_dir }}/tool_conf_interactive.xml"
  - "{{ galaxy_server_dir }}/config/nels_tool_conf.xml"

galaxy_config_templates:
  - src: files/galaxy/config/tool_conf.xml
    dest: "{{ galaxy_config_dir }}/tool_conf.xml"
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config['galaxy']['job_config_file'] }}"
  - src: templates/galaxy/config/reports.yml
    dest: "{{ galaxy_config_dir }}/reports.yml"
  - src: templates/galaxy/config/pulsar_app.yml.j2
    dest: "{{ galaxy_config_dir }}/pulsar_app.yml"

galaxy_dynamic_job_rules_src_dir: files/galaxy/dynamic_rules
galaxy_dynamic_job_rules_dir: "{{ galaxy_root }}/dynamic_rules"
galaxy_dynamic_job_rules:
  - usegalaxy/joint_destinations.yaml
  - usegalaxy/sorting_hat.py
  - usegalaxy/destination_specifications.yaml
  - usegalaxy/tool_destinations.yaml
  - readme.txt

# NeLS Storage
nels_storage_url: "https://test-fe.cbu.uib.no/nels/welcome.xhtml"
nels_storage_api_url: "https://test-fe.cbu.uib.no/nels-storage2"
nels_storage_import_tool_dir: "{{ galaxy_server_dir }}/tools/data_source"
nels_storage_export_tool_dir: "{{ galaxy_server_dir }}/tools/data_destination"
nels_storage_config_dir: "{{ galaxy_config['galaxy']['tool_data_path'] }}"
nels_storage_tool_conf_dir: "{{ galaxy_server_dir }}/config"

# systemd
galaxy_systemd_mode: mule
galaxy_systemd_reports: true
galaxy_zergpool_listen_addr: 127.0.0.1:8080
galaxy_restart_handler_name: "Restart Galaxy"
galaxy_systemd_handlers: 8
galaxy_systemd_workflow_schedulers: 2

galaxy_selinux_web_access_dirs:
  - "{{ galaxy_server_dir }}/client/galaxy/images"
  - "{{ galaxy_server_dir }}/static"

# Interactive Tools
docker_install_compose: false
docker_users:
  - "{{ galaxy_user.name }}"
gie_proxy_dir: /srv/galaxy/gie-proxy/proxy
gie_proxy_git_version: ie2
gie_proxy_setup_nodejs: nodeenv
gie_proxy_virtulenv_command: "{{ pip_virtualenv_command }}"
gie_proxy_nodejs_version: "10.13.0"
gie_proxy_virtualenv: /srv/galaxy/gie-proxy/venv
gie_proxy_setup_service: systemd
gie_proxy_sessions_path: "{{ galaxy_mutable_data_dir }}/interactivetools_map.sqlite"


# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=galaxy_host)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=galaxy_host)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - nginx
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_domains:
 - "{{ galaxy_host }}"
 - "*.interactivetoolentrypoint.interactivetool.{{ galaxy_host }}"
certbot_dns_provider: cloudflare
certbot_dns_credentials:
  api_key: "{{ cloudflare_api_token }}"
  email: "{{ cloudflare_email }}"
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_enable_default_server: false
nginx_ssl_servers:
  - galaxy
  - galaxy-gie-proxy
nginx_conf_http:
  client_max_body_size: 1g
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/letsencrypt/live/{{ galaxy_host }}/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/letsencrypt/live/{{ galaxy_host }}/privkey.pem


cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo
cvmfs_quota_limit: 6000


custom_telegraf_env: "/usr/bin/env GDPR_MODE=1 GALAXY_ROOT=/srv/galaxy/ GALAXY_CONFIG_FILE=/srv/galaxy/config/galaxy.yml PGDATABASE={{galaxy_database}} PGHOST={{db_host}}"
custom_telegraf_gxadmin_bin: /usr/local/bin/gxadmin
custom_telegraf_slurm_collect_bin: /usr/local/bin/slurm-collect
telegraf_plugins_extra:
  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - metric_separator = "."
      - allowed_pending_messages = 10000
  monitor_galaxy_queue:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery queue-overview --short-tool-id"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "30s"
# Some custom galaxy monitoring stuff
  galaxy_uploaded:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery upload-gb-in-past-hour"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1h"
  galaxy_lastlog:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} uwsgi lastlog"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "30s"
  galaxy_jobs_queued:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery jobs-queued"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queued_internal:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery jobs-queued-internal-by-handler"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_oidc:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery users-with-oidc"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  postgres_extra:
    plugin: "exec"
    config:
      - commands = [
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-cache-hit",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-index-size",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-index-usage",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-table-bloat",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-table-size",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-unused-indexes",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-vacuum-stats",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-stat-bgwriter",
          "{{ custom_telegraf_env }} {{ custom_telegraf_gxadmin_bin }} iquery pg-stat-user-tables",
        ]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  slurm:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_slurm_collect_bin }}"]
      - data_format = "influx"
  nginx:
    config:
      - urls = ["https://{{ galaxy_host }}/server_status"]

  logparser:
    plugin: logparser
    config:
      - files = ["/var/log/nginx/access.log"]
      - from_beginning = true
      - name_override = "nginx_access_log"
    filter:
      name: grok
      config:
        - patterns = ["%{COMBINED_LOG_FORMAT}"]
